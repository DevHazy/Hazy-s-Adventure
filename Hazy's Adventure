using System;
using System.Collections.Generic;

namespace Hazy_s_Adventure
{
    //Startup 
    class Program
    {
        static int screenWidth = 80;
        static int screenHeight = 25;
        static int playerX = 0;
        static int playerY = 0;
        static Random rand = new Random();
        static List<Enemy> enemies = new List<Enemy>();

        static void Main(string[] args)
        {
            // Get the player's name
            Console.Write("Enter your character's name: ");
            string playerName = Console.ReadLine();

            Console.WriteLine($"Welcome to Hazy's Adventure, {playerName}!");

            // Initialize the game screen and draw the player character
            InitializeGameScreen();
            DrawGameScreen();

            // Initialize the enemies
            InitializeEnemies();

            // Loop to read input from the keyboard and move the player character
            while (true)
            {
                GetPlayerInput();
            }
        }

        static void InitializeGameScreen()
        {
            Console.Clear();
            Console.WindowWidth = screenWidth;
            Console.WindowHeight = screenHeight;
            Console.BufferWidth = screenWidth;
            Console.BufferHeight = screenHeight;
            Console.CursorVisible = false;
        }

        static void DrawGameScreen()
        {
            Console.Clear();

            // Draw the player character at the current position
            Console.SetCursorPosition(playerX, playerY);
            Console.Write("O");

            // Draw the enemies
            DrawEnemies();

            Console.SetCursorPosition(0, screenHeight - 1);
            Console.Write("Press any arrow key to move, or press Q to quit.");
        }

        static void GetPlayerInput()
        {
            ConsoleKeyInfo input = Console.ReadKey(true);

            switch (input.Key)
            {
                case ConsoleKey.W:
                case ConsoleKey.UpArrow:
                    MovePlayer(0, -1);
                    break;
                case ConsoleKey.A:
                case ConsoleKey.LeftArrow:
                    MovePlayer(-1, 0);
                    break;
                case ConsoleKey.S:
                case ConsoleKey.DownArrow:
                    MovePlayer(0, 1);
                    break;
                case ConsoleKey.D:
                case ConsoleKey.RightArrow:
                    MovePlayer(1, 0);
                    break;
                case ConsoleKey.Q:
                    Environment.Exit(0);
                    break;
                default:
                    break;
            }
        }

        static void MovePlayer(int deltaX, int deltaY)
        {
            int newX = playerX + deltaX;
            int newY = playerY + deltaY;

            // Check if the new position is valid (i.e., not outside the bounds of the game screen)
            if (newX >= 0 && newX < screenWidth && newY >= 0 && newY < screenHeight)
            {
                playerX = newX;
                playerY = newY;
                DrawGameScreen();
            }
        }
        }
}

class Enemy
{
    public string Name { get; private set; }
    public int MaxHP { get; private set; }
    public int CurrentHP { get; set; }
    public int Attack { get; private set; }
    public int Defense { get; private set; }
    public bool IsBoss { get; private set; }

    public Enemy(string name, int maxHP, int attack, int defense, bool isBoss)
    {
        Name = name;
        MaxHP = maxHP;
        CurrentHP = maxHP;
        Attack = attack;
        Defense = defense;
        IsBoss = isBoss;
    }
}

    class Boss : Enemy
    {
    public Boss(string name, int maxHP, int attack, int defense) : base(name, maxHP, attack, defense, true) { }
    }

class MainClass
{
    static List<Enemy> enemies = new List<Enemy>();

    static void InitializeEnemies()
    {
        // World 1 enemies
        enemies.Add(new Enemy("Goblin", 15, 10, 10, false));
        enemies.Add(new Enemy("Orc", 25, 15, 15, false));
        enemies.Add(new Enemy("Dragon", 30, 25, 25, false));

        // World 1 boss
        enemies.Add(new Boss("Chupacabra", 72, 30, 30));

        // World 2 Enemies
        enemies.Add(new Enemy("Manticore", 50, 35, 35, false));
        enemies.Add(new Enemy("Vampire", 55, 35, 35, false));
        enemies.Add(new Enemy("Bat", 40, 35, 35, false));
        enemies.Add(new Enemy("Ghoul", 35, 35, 35, false));
        enemies.Add(new Enemy("Giant Rat", 40, 35, 35, false));

        // World 2 boss
        enemies.Add(new Boss("Baron Haze, the dank", 100, 45, 45));

        // World 3 Enemies
        enemies.Add(new Enemy("Mummy", 45, 40, 40, false));
        enemies.Add(new Enemy("Wraith", 60, 45, 45, false));
        enemies.Add(new Enemy("Unholy Priest", 35, 35, 25, false));
        enemies.Add(new Enemy("Specter", 55, 40, 40, false));
        enemies.Add(new Enemy("Ghost", 45, 45, 45, false));

        // World 3 boss
        enemies.Add(new Boss("Bloody Death Knight", 140, 65, 65));

        // World 4 enemies
        enemies.Add(new Enemy("Minotaur", 80, 55, 60, false));
        enemies.Add(new Enemy("Chimaera", 82, 82, 48, 48, false));
        enemies.Add(new Enemy("Hydra", 100, 100, 60, 72, false));
        enemies.Add(new Enemy("Blood Dragon", 100, 100, 68, 72, false));
        enemies.Add(new Enemy("Demon Summoner", 80, 80, 60, 60, false));

        // World 4 boss
        enemies.Add(new Boss("Rishnok the Demon Lord", 220, 220, 70, 85));

    }

}
class Program
{
    static void Main()
    {
        Character player = CreateCharacter();
        Console.WriteLine("You have created a " + player.Class.Name + " named " + player.Name + ".");

        // create a new weapon
        Weapon rustySword = new Weapon("Rusty Sword", 2);

        // equip the weapon to the character
        player.EquipWeapon(rustySword);

        // listen for the Tab key to display the menu
        Console.CancelKeyPress += new ConsoleCancelEventHandler(Console_CancelKeyPress);

        // display the menu options and handle the selected option
        while (true)
        {
            MenuOption option = DisplayMenu();
            HandleMenuOption(option, player);
        }
    }
}

class MainClass
{
    // Character Creation Including values as in order [CHP, MHP, AP, Defense, Stamina]
    static Character CreateCharacter()
    {
        Console.WriteLine("Choose a class:");
        Console.WriteLine("1. Druid");
        Console.WriteLine("2. Warrior");
        Console.WriteLine("3. Rogue");
        Console.WriteLine("4. Mage");
        Console.WriteLine("5. Priest");

        //Values displayed as [CHP,MHP,AP,Def,Int,Stam]
        string input = Console.ReadLine();
        switch (input)
        {
            case "1":
                return new Character(new Druid("Druid", 30, 30, 15, 20, 25, 100));
            case "2":
                return new Character(new Warrior("Warrior", 30, 30, 23, 20, 10, 100));
            case "3":
                return new Character(new Rogue("Rogue", 30, 30, 20, 20, 12, 100));
            case "4":
                return new Character(new Mage("Mage", 25, 25, 8, 15, 26, 100));
            case "5":
                return new Character(new Priest("Priest", 25, 25, 10, 15, 23, 100));
            default:
                Console.WriteLine("Invalid choice. Please choose a valid class.");
                return CreateCharacter();
        }
    }
}

// Display the menu options and get user input
static MenuOption DisplayMenu()
{
    Console.WriteLine("Choose an action:");
    Console.WriteLine("1. Attack");
    Console.WriteLine("2. Defend");
    Console.WriteLine("3. Use Item");
    Console.WriteLine("4. Flee");

    string input = Console.ReadLine();
    switch (input)
    {
        case "1":
            return MenuOption.Attack;
        case "2":
            return MenuOption.Defend;
        case "3":
            return MenuOption.UseItem;
        case "4":
            return MenuOption.None;
        default:
            Console.WriteLine("Invalid choice. Please choose a valid option.");
            return DisplayMenu();
    }
}

// Handle the selected menu option
static void HandleMenuOption(MenuOption option, Character player)
{
    switch (option)
    {
        case MenuOption.Attack:
            player.Attack();
            break;
        case MenuOption.Defend:
            player.Defend();
            break;
        case MenuOption.UseItem:
            player.UseItem();
            break;
        case MenuOption.None:
            Environment.Exit(0);
            break;
        default:
            Console.WriteLine("Invalid option.");
            break;
    }
}

// Handle the Tab key to display the menu
static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs e)
{
    e.Cancel = true;
    DisplayMenu();
}

static void Main(string[] args)
{
    // initialize the player and enemy
    Character player = new Character("Player", 100, 10);
    Character enemy = new Character("Enemy", 50, 5);

    // set up the CancelKeyPress event handler
    Console.CancelKeyPress += Console_CancelKeyPress;

    // main game loop
    while (true)
    {
        // display the menu and handle the selected option
        MenuOption option = DisplayMenu();
        HandleMenuOption(option, player);
    }
}

// display the menu and get the user's choice
class Program
{
    enum MenuOption { Attack = 1, Defend, Heal, Flee }

    static void Main()
    {
        while (true)
        {
            MenuOption option = DisplayMenu();
            HandleMenuOption(option);
        }
    }

    static MenuOption DisplayMenu()
    {
        Console.WriteLine("1. Attack");
        Console.WriteLine("2. Defend");
        Console.WriteLine("3. Heal");
        Console.WriteLine("4. Flee");
        Console.Write("Choose an option: ");

        int choice = int.Parse(Console.ReadLine());
        return (MenuOption)choice;
    }

    static void HandleMenuOption(MenuOption option)
    {
        switch (option)
        {
            case MenuOption.Attack:
                Console.WriteLine("You attack the enemy!");
                break;
            case MenuOption.Defend:
                Console.WriteLine("You defend against the enemy's attack.");
                break;
            case MenuOption.Heal:
                Console.WriteLine("You heal yourself.");
                break;
            case MenuOption.Flee:
                Console.WriteLine("You flee from the battle!");
                Environment.Exit(0);
                break;
            default:
                Console.WriteLine("Invalid option. Please choose again.");
                break;
        }
    }
}

static void Main(string[] args)
{
    while (true)
    {
        MenuOption option = DisplayMenu();
        HandleMenuOption(option);
    }
}

static void HandleMenuOption(MenuOption option)
{
    switch (option)
    {
        case MenuOption.Attack:
            // implement attack logic
            break;
        case MenuOption.Defend:
            // implement defend logic
            break;
        case MenuOption.Rest:
            // implement rest logic
            break;
        case MenuOption.Flee:
            // implement flee logic
            break;
        default:
            Console.WriteLine("Invalid option selected. Please select a valid option.");
            break;
    }
}


enum MenuOption
{
    Attack,
    Defend,
    UseItem
}

static void HandleMenuOption(MenuOption option)
{
    switch (option)
    {
        case MenuOption.Inventory:
            // Handle the inventory option
            break;
        case MenuOption.Stats:
            // Handle the stats option
            break;
        case MenuOption.Equipment:
            // Handle the equipment option
            break;
        default:
            break;
    }
}   

        //Adding movement to the game

private void MovePlayer(int deltaX, int deltaY)
{
    // Calculate the new position of the player character
    int newX = playerX + deltaX;
    int newY = playerY + deltaY;

    // Check if the new position is valid (i.e., not outside the bounds of the game screen)
    if (newX >= 0 && newX < screenWidth && newY >= 0 && newY < screenHeight)
    {
        // Check if the new position collides with any obstacles or walls
        if (!CollidesWithObstacle(newX, newY))
        {
            // Update the position of the player character
            playerX = newX;
            playerY = newY;

            // Redraw the game screen with the player character in the new position
            DrawGameScreen();
        }
    }
}

private bool CollidesWithObstacle(int x, int y)
{
    // Check if the given coordinates collide with any obstacle or wall
    foreach (var obstacle in obstacles)
    {
        if (obstacle.X == x && obstacle.Y == y)
        {
            return true;
        }
    }
    return false;
}

class Character
{
    public string Name {

        // Play the game
        bool gameOver = false;
        int currentEnemyIndex = 0;
        while (!gameOver)
        {
            // Display player and enemy status, Health and Stamina
                // TODO add debuffs and buffs
            Console.WriteLine(player.GetName() + ": " + player.GetCurrentHealth() + "/" + player.GetMaxHealth() + " HP, " + player.GetStamina() + " stamina");
            Console.WriteLine(enemies[currentEnemyIndex].GetName() + ": " + enemies[currentEnemyIndex].GetCurrentHealth() + "/" + enemies[currentEnemyIndex].GetMaxHealth() + " HP");

            // Player's turn with 4 options on what to do 
                //TODO Inventory and inventory display while selecting items 
            bool turnOver = false;
            while (!turnOver)
            {
            // Add debuffs and buffs to status
                Console.WriteLine("Choose an action:");
                Console.WriteLine("1. Attack");
                Console.WriteLine("2. Use item");
                Console.WriteLine("3. View status");
                Console.WriteLine("4. Run away");

                string input = Console.ReadLine();
                switch (input)
                {
                    case "1":
                        player.UseAbility1(enemies[currentEnemyIndex]);
                        turnOver = true;
                        break;
                    case "2":
                        UseItem(player);
                        break;
                    case "3":
                        Console.WriteLine(player.GetName() + ":");
                        Console.WriteLine("Level: " + player.GetLevel());
                        Console.WriteLine("Strength: " + player.GetStrength());
                        Console.WriteLine("Dexterity: " + player.GetDexterity());
                        Console.WriteLine("Endurance: " + player.GetEndurance());
                        Console.WriteLine("Intelligence: " + player.GetIntelligence());
                        Console.WriteLine("Stamina: " + player.GetStamina());
                        Console.WriteLine("Experience: " + player.GetExperience() + "/" + player.GetExperienceToNextLevel());
                        Console.WriteLine("");
                        break;
                    case "4":
                        Console.WriteLine("You ran away!");
                        gameOver = true;
                        turnOver = true;
                        break;
                    default:
                        Console.WriteLine("Invalid input!");
                        break;
                }
            }
}
        // Enemy turn
        Console.WriteLine();
        Console.WriteLine($"{enemy.GetName()}'s turn:");
        enemy.PrintStats();
        enemy.Ability1(player);

        // Regenerate stamina for both player and enemy
        player.RegenerateStamina();
        enemy.RegenerateStamina();

        // Check if enemy is defeated
        if (enemies[currentEnemyIndex].GetCurrentHealth() == 0)
        {
        Console.WriteLine($"{enemies[currentEnemyIndex].GetName()} has been defeated!");
        player.GainExperience(enemies[currentEnemyIndex].GetExperience());
        currentEnemyIndex++;

        // Check if all enemies are defeated
        if (currentEnemyIndex == enemies.Length)
        {
            Console.WriteLine($"{player.GetName()} wins!");
            Console.ReadLine();
            return;
        }
        }

        // Check if player is defeated
        if (player.GetCurrentHealth() == 0)
        {
        Console.WriteLine($"{enemy.GetName()} has defeated you! Time to git gud scrub!");
        Console.ReadLine();
        return;
        }

        // Enemy turn while checking if player health = 0, if not regen stam
        if (!gameOver)
        {
        enemies[currentEnemyIndex].UseAbility1(player);
        if (player.GetCurrentHealth() == 0)
        {
        Console.WriteLine($"{enemy.GetName()} has defeated you! Time to git gud scrub!");
        Console.ReadLine();
        return;
        }
}

// Regenerate stamina
player.RegenerateStamina();

Console.WriteLine("Game over!");
        //Item selections
        //TODO add more stuffs
    static void UseItem(Character character)
    {
        Console.WriteLine("Choose an item to use:");
        Console.WriteLine("1. Health potion (+50 HP)");
        Console.WriteLine("2. Stamina potion (+50 stamina)");

        string input = Console.ReadLine();
        switch (input)
        {
            case "1":
                character.UseHealthPotion();
                break;
            case "2":
                character.UseStaminaPotion();
                break;
            default:
                Console.WriteLine("Invalid input!");
                break;
        }
    }
}
        // Stats 
public class Character {
    public int level;
    public int experience;
    public int experienceToNextLevel;
    public int maxHealth;
    public int currentHealth;
    public int maxStamina;
    public int currentStamina;
    public int strength;
    public int dexterity;
    public int endurance;
    public int intelligence;
    public CharacterClass characterClass;

    public Character(CharacterClass characterClass) {
        this.characterClass = characterClass;
        this.level = 1;
        this.experience = 0;
        this.experienceToNextLevel = 100;
        this.maxHealth = 30;
        this.currentHealth = 30;
        this.maxStamina = 50;
        this.currentStamina = 50;
        this.strength = 5;
        this.dexterity = 5;
        this.endurance = 5;
        this.intelligence = 5;
    }
        //Stats on levelup varying by class 
    public void LevelUp() {
        this.level++;
        this.experienceToNextLevel = (int)(this.experienceToNextLevel * 1.075);

        switch (this.characterClass) {
            case CharacterClass."Druid":
                this.maxHealth += 5;
                this.maxStamina += 5;
                this.strength += 1;
                this.dexterity += 2;
                this.endurance += 1.9;
                this.intelligence += 2;
                break;

            case CharacterClass."Warrior":
                this.maxHealth += 5;
                this.maxStamina += 4;
                this.strength += 3;
                this.dexterity += 1;
                this.endurance += 1.6;
                this.intelligence += 1;
                break;

            case CharacterClass."Rogue":
                this.maxHealth += 5;
                this.maxStamina += 4;
                this.strength += 2;
                this.dexterity += 2;
                this.endurance += 1.8;
                this.intelligence += 1;
                break;

            case CharacterClass."Mage":
                this.maxHealth += 5;
                this.maxStamina += 4;
                this.strength += 1;
                this.dexterity += 1;
                this.endurance += 2;
                this.intelligence += 2;
                break;

            case CharacterClass."Priest":
                this.maxHealth += 5;
                this.maxStamina += 4;
                this.strength += 1;
                this.dexterity += 1;
                this.endurance += 2;
                this.intelligence += 2;
                break;
        }

        this.currentHealth = this.maxHealth;
        this.currentStamina = this.maxStamina;

        Console.WriteLine("Congratulations! You have reached level " + this.level + ".");
    }
}
        //Display the characters stats
    // Methods
    public string GetName()
    {
        return name;
    }

    public int GetLevel()
    {
        return level;
    }

    public int GetStrength()
    {
        return strength;
    }

    public int GetDexterity()
    {
        return dexterity;
    }

    public int GetEndurance()
    {
        return endurance;
    }

    public int GetIntelligence()
    {
        return intelligence;
    }

    public int GetMaxHealth()
    {
        return maxHealth;
    }

    public int GetCurrentHealth()
    {
        return currentHealth;
    }

    public int GetMaxStamina()
    {
        return maxStamina;
    }

    public int GetStamina()
    {
        return currentStamina;
    }

    public int GetExperience()
    {
        return experience;
    }

    public int GetExperienceToNextLevel()
    {
        return experienceToNextLevel;
    }

    public void UseAbility1(Character target)
    {
        currentStamina -= 20;
        Console.WriteLine(name + " uses Ability 1 on " + target.GetName() + "!");
        int damage = strength
        Console.WriteLine("Choose an ability:");
        Console.WriteLine("1. Ability 1 (30 stamina)");
        Console.WriteLine("2. Ability 2 (40 stamina)");
        Console.WriteLine("3. Ability 3 (50 stamina)");
        Console.WriteLine("4. Ability 4 (60 stamina)");

        //Damage taken player or mob. 
    public void TakeDamage(int damage)
    {
        currentHealth -= damage;
        Console.WriteLine(name + " takes " + damage + " damage!");
        if (currentHealth <= 0)
        {
            currentHealth = 0;
            Console.WriteLine(name + " has been defeated!");
        }
    }
        //Status display for gaining resources or Xp. 
    public void UseHealthPotion()
    {
        if (currentHealth == maxHealth)
        {
            Console.WriteLine("You are already at full health!");
            return;
        }
        currentHealth += 50;
        if (currentHealth < maxHealth)
        {
            currentHealth = maxHealth;
        }
        Console.WriteLine(name + " uses a health potion and restores 50 HP!");
    }

    public void UseStaminaPotion()
    {
        if (currentStamina == maxStamina)
        {
            Console.WriteLine("You already have full stamina!");
            return;
        }
        currentStamina += 50;
        if (currentStamina < maxStamina)
        {
            currentStamina = maxStamina;
        }
        Console.WriteLine(name + " uses a stamina potion and restores 50 stamina!");
    }

    public void GainExperience(int amount)
    {
        experience += amount;
        Console.WriteLine(name + " gains " + amount + " experience!");
        if (experience >= experienceToNextLevel)
        {
            LevelUp();
        }
    }
        //TODO needs more balance or i could just increase mob dmg/HP we'll see 

class Druid : Character
{
    public Druid(string name, int strength, int dexterity, int endurance, int intelligence, int maxHealth) : base(name, strength, dexterity, endurance, intelligence, maxHealth)
    {
    this.ability1Name = "Nature's Wrath";
    this.ability2Name = "Bestial Fury";
    this.ability3Name = "Birds of Yor";
    this.ability4Name = "Nature's Touch";
    }

    public void Ability5(Character target)
    {
        currentStamina -= 30;
        Console
        Console.WriteLine(name + " uses Nature's Wrath on " + target.GetName() + "!");
        int damage = strength + 20;
        target.TakeDamage(damage);
    }

    public void Ability6(Character target)
    {
        currentStamina -= 40;
        Console.WriteLine(name + " uses Bestial Fury on " + target.GetName() + "!");
        int damage = strength + 30;
        target.TakeDamage(damage);
    }

    public void Ability7(Character target)
    {
        currentStamina -= 50;
        Console.WriteLine(name + " uses Birds of Yor on " + target.GetName() + "!");
        int damage = strength + 40;
        target.TakeDamage(damage);
    }
    


    // Ability 8: Nature's Touch - heals the target character by a fixed amount
    public void Ability8(Character target)
    {
        int healAmount = 33; // Adjustable value, TODO make it scale with int
        if (this.currentStamina >= 10)
        {
        Console.WriteLine(this.name + " casts Nature's Touch on " + target.GetName() + " and heals them for " + healAmount + " health.");
        target.Heal(healAmount);
        this.currentStamina -= 10;
        }
        else
        {
        Console.WriteLine("Not enough stamina to use Nature's Touch!");
        }
    }
}

class Warrior : Character
{
    public Warrior(string name, int strength, int dexterity, int endurance, int intelligence, int maxHealth) : base(name, strength, dexterity, endurance, intelligence, maxHealth)
    {
    this.ability1Name = "Sword Strike";
    this.ability2Name = "Shield Bash";
    this.ability3Name = "Rage";
    this.ability4Name = "Whirlwind";
    }

    public void Ability5(Character target)
    {
        currentStamina -= 30;
        Console.WriteLine(name + " uses Sword Strike on " + target.GetName() + "!");
        int damage = strength + 20;
        target.TakeDamage(damage);
    }

    public void Ability6(Character target)
    {
        currentStamina -= 40;
        Console.WriteLine(name + " uses Shield Bash on " + target.GetName() + "!");
        int damage = strength + 30;
        target.TakeDamage(damage);
    }

    public void Ability7(Character target)
    {
        currentStamina -= 50;
        Console.WriteLine(name + " uses Rage on " + target.GetName() + "!");
        int damage = strength + 40;
        target.TakeDamage(damage);
    }

    public void Ability8(Character target)
    {
        currentStamina -= 60;
        Console.WriteLine(name + " uses Whirlwind on " + target.GetName() + "!");
        int damage = strength + 50;
        target.TakeDamage(damage);
    }
}

class Rogue : Character
{
    public Rogue(string name, int strength, int dexterity, int endurance, int intelligence, int maxHealth) : base(name, strength, dexterity, endurance, intelligence, maxHealth)
    {
    this.ability1Name = "Backstab";
    this.ability2Name = "Poison Dagger";
    this.ability3Name = "Evasion";
    this.ability4Name = "Shadowstep";
    }

    public void Ability5(Character target)
    {
        currentStamina -= 30;
        Console.WriteLine(name + " uses Backstab on " + target.GetName() + "!");
        int damage = dexterity + 20;
        target.TakeDamage(damage);
    }

    public void Ability6(Character target)
    {
        currentStamina -= 40;
        Console.WriteLine(name + " uses Poison Dagger on " + target.GetName() + "!");
        int damage = dexterity + 30;
        target.TakeDamage(damage);
    }

    public void Ability7(Character target)
    {
        //TODO make the rogue be able to dodge the next 2 attacks (only meele)
        currentStamina -= 50;
        Console.WriteLine(name + " uses Evasion on " + target.GetName() + "!");
        int damage = dexterity + 40;
        target.TakeDamage(damage);
    }

    public void Ability8(Character target)
    {
        currentStamina -= 60;
        Console.WriteLine(name + " uses Shadowstep on " + target.GetName() + "!");
        int damage = dexterity + 50;
        target.TakeDamage(damage);
    }
}

class Mage : Character
{
    public Mage(string name, int strength, int dexterity, int endurance, int intelligence, int maxHealth) : base(name, strength, dexterity, endurance, intelligence, maxHealth)
    {
    this.ability1Name = "Frostbolt";
    this.ability2Name = "Fireball";
    this.ability3Name = "Raging Volcano";
    this.ability4Name = "Cold winds";
    }

    public void Ability5(Character target)
    {
        currentStamina -= 30;
        Console.WriteLine(name + " uses Frostbolt on " + target.GetName() + "!");
        int damage = intelligence + 20;
        target.TakeDamage(damage);
    }

    public void Ability6(Character target)
    {
        currentStamina -= 40;
        Console.WriteLine(name + " uses Fireball on " + target.GetName() + "!");
        int damage = intelligence + 30;
        target.TakeDamage(damage);
    }

    public void Ability7(Character target)
    {
        currentStamina -= 50;
        Console.WriteLine(name + " uses Raging Volcano on " + target.GetName() + "!");
        int damage = intelligence + 40;
        target.TakeDamage(damage);
    }

    public void Ability8(Character target)
    {
        currentStamina -= 60;
        Console.WriteLine(name + " uses Cold Winds on " + target.GetName() + "!");
        int damage = intelligence + 50;
        target.TakeDamage(damage);
    }
}

class Priest : Character
{
    public Priest(string name, int strength, int dexterity, int endurance, int intelligence, int maxHealth) : base(name, strength, dexterity, endurance, intelligence, maxHealth)
    {
    this.ability1Name = "Holy Smite";
    this.ability2Name = "Holy Fire";
    this.ability3Name = "Divine Blessing";
    this.ability4Name = "Reckoning";
    }

    public void Ability5(Character target)
    {
        currentStamina -= 30;
        Console.WriteLine(name + " uses Holy Smite on " + target.GetName() + "!");
        int damage = intelligence + 20;
        target.TakeDamage(damage);
    }

    public void Ability6(Character target)
    {
        currentStamina -= 40;
        Console.WriteLine(name + " uses Holy Fire on " + target.GetName() + "!");
        int damage = intelligence + 30;
        target.TakeDamage(damage);
    }
    // Ability 3: Blessing - heals the target character by a fixed amount scaled with int
    public void Ability7(Character target)
    {
        int healAmount = 20; // adjustable value, make it scale with int
        if (this.currentStamina >= 10)
        {
        Console.WriteLine(this.name + " casts Divine Blessing on " + target.GetName() + " and heals them for " + healAmount + " health.");
        target.Heal(healAmount);
        this.currentStamina -= 10;
        }
        else
        {
        Console.WriteLine("Not enough stamina to use Blessing!");
        }
    }
}
    }

    public void Ability8(Character target)
    {
        currentStamina -= 60;
        Console.WriteLine(name + " uses Reckoning on " + target.GetName() + "!");
        int damage = intelligence + 50;
        target.TakeDamage(damage);
    }

        //Stat increases for items
class Item
{
    public string name;
    public string description;
    public int bonusStrength;
    public int bonusDexterity;
    public int bonusEndurance;
    public int bonusIntelligence;
    public int bonusMaxHealth;

    public Item(string name, string description, int bonusStrength, int bonusDexterity, int bonusEndurance, int bonusIntelligence, int bonusMaxHealth)
    {
        this.name = name;
        this.description = description;
        this.bonusStrength = bonusStrength;
        this.bonusDexterity = bonusDexterity;
        this.bonusEndurance = bonusEndurance;
        this.bonusIntelligence = bonusIntelligence;
        this.bonusMaxHealth = bonusMaxHealth;
    }

    public void ApplyBonus(Character character)
    {
        character.strength += bonusStrength;
        character.dexterity += bonusDexterity;
        character.endurance += bonusEndurance;
        character.intelligence += bonusIntelligence;
        character.maxHealth += bonusMaxHealth;
    }
}
class Item
{
        //TODO make classes like warrior and rogue able to dual wield one handed weapons 
        //TODO add dots and a power increase after unlocking something for the Legendary Shortsword
        // Create some items [CHP,MHP,AP,Def,Int,Stam]
        //TODO add more items :) 
        //Maybe delete the loop but keep battle begins msg
        //Maybe also add weapon skills and armor skill increasing defense depending 
        //on what AC it is and maybe increase crit% with weapon skill
        //1 handed Swords, can be worn together with shield

    
        Item Sword = new Item("Shortsword", "A small, agile weapon with a sharp blade, perfect for quick strikes and close combat.", 0, 0, 4, 0, 0, 0);
        Item Sword = new Item("Gladius", "A short, thrusting sword favored by Roman soldiers, designed for both offense and defense.", 0, 0, 5, 0, 0, 0);
        Item Sword = new Item("Rapier", "A slender, elegant sword with a pointed blade, used for thrusting attacks and fencing.", 0, 0, 7, 0, 0, 0);
        Item Sword = new Item("Cutlass", "A curved, single-edged sword used by pirates and sailors for slashing attacks.", 0, 0, 11, 0, 0, 0);
        Item Sword = new Item("Dark Shortsword", " A sword with a dark aura, capable of draining the life force from enemies.", 0, 0, 11, 0, 0, 0);
        Item Sword = new Item("Poisoned Sword", "A sword coated with deadly poison, it can deal additional damage over time.", 0, 0, 13, 0, 0, 0);
        Item Sword = new Item("Longsword", "A versatile sword with a straight blade, used for both thrusting and slashing attacks.", 0, 0, 15, 0, 0, 0);
        Item Sword = new Item("Enchanted Shortsword", "A short sword imbued with terrible Magic, capable of dealing extra damage on attack.", 0, 0, 15, 0, 0, 0);
        Item Sword = new Item("Fiery Longsword", " A sword that bursts into flames upon contact with an enemy, dealing extra damage..", 0, 0, 18, 0, 0, 0);
        Item Sword = new Item("Legendary Shortsword", "A sword with a rich history, it has been passed down through generations and is said to have magical properties.", 0, 0, 25, 0, 0, 0);
        Item Sword = new Item("Demonic Blade", "A sharp blade forged in the depths of Hell, imbued with souls of the fallen.", 0, 0, 33, 0, 0, 0);


        //Shields
        Item Shield = new Item("Round Shield", "A simple, circular shield for one-handed use.", 0, 4, 0, 4, 0, 5);
        Item Shield = new Item("Kite Shield", "A large, triangular-shaped shield for cavalry units.", 0, 5, 0, 7, 0, 6);
        Item Shield = new Item("Tower Shield", "A tall and wide shield for heavily armored infantry.", 0, 7, 0, 9, 0, 7);
        Item Shield = new Item("Buckler", " A small, handheld shield for one-handed use.", 0, 8, 0, 12, 0, 10);
        Item Shield = new Item("Heater Shield", "A slightly curved shield for upper body protection.", 0, 8, 0, 14, 0, 10);
        Item Shield = new Item("Scutum", "A large, rectangular shield used by ancient Roman soldiers.", 0, 10, 0, 16, 0, 10);
        Item Shield = new Item("Pavise", "A large, heavy shield for archer cover.", 0, 12, 0, 20, 0, 15);
        Item Shield = new Item("Targe", "A small, round shield for Scottish warriors.", 0, 15, 0, 20, 0, 15);
        Item Shield = new Item("Hoplon", "A large, round shield used by ancient Greek soldiers.", 0, 18, 0, 23, 0, 20);
        Item Shield = new Item("Aspis", "A large, round shield for ancient Spartan soldiers.", 0, 24, 0, 28, 0, 23);
        

        
        //Wands can be worn with a shield
        Item Wand = new Item("Vine Wand", "A wand made from the wood of the Vine plant, known for its ability to perform magic related to growth and transformation.", 0, 0, 0, 3, 0, 0);
        Item Wand = new Item("Hawthon Wand", "A wand made from the wood of the Hawthorn tree, known for its defensive and protective magic.", 0, 0, 0, 4, 0, 0);
        Item Wand = new Item("Dragon Heartstring Wand", "A wand with a core made from a dragon's heartstring, known for its power and versatility.", 0, 0, 0, 6, 0, 0);
        Item Wand = new Item("Unicorn Horn Wand", "A wand with a core made from a unicorn's horn, known for its loyalty and ability to perform healing magic.", 0, 0, 0, 9, 0, 0);
        Item Wand = new Item("Phoenix Feather Wand", " A wand with a core made from a phoenix's feather, known for its ability to perform magic related to fire and transformation.", 0, 0, 0, 10, 0, 0);
        Item Wand = new Item("Willow Wand", "A wand made from the wood of the Willow tree, known for its ability to perform magic related to divination and healing.", 0, 0, 0, 12, 0, 0);
        Item Wand = new Item("Oak Wand", "A wand made from the wood of the Oak tree, known for its strength and ability to perform magic related to protection.", 0, 0, 0, 14, 0, 0);
        Item Wand = new Item("Maple Wand", "A wand made from the wood of the Maple tree, known for its ability to perform magic related to charm and persuasion.", 0, 0, 0, 17, 0, 0);
        Item Wand = new Item("Ebony Wand", "A wand made from the wood of the Ebony tree, known for its ability to perform magic related to the dark arts and protection from dark magic.", 0, 0, 0, 23, 0, 0);
        Item Wand = new Item("Elder Wand", "A long, slender wand made from the wood of the Elder tree, said to be the most powerful wand in existence.", 0, 0, 0, 28, 0, 0);


        //Staves count as two handers, so no shields
        Item Staff = new Item("Staff of Fire", "A powerful staff that can create and control flames, causing devastating damage to enemies.", 0, 0, 0, 5, 0, 0);
        Item Staff = new Item("Staff of Ice", "A staff that can create and control ice, freezing enemies in their tracks.", 0, 0, 0, 8, 0, 0);
        Item Staff = new Item("Staff of Arcane Lightning", "A staff that can call down bolts of lightning, dealing heavy damage to enemies.", 0, 0, 0, 10, 0, 0);
        Item Staff = new Item("Staff of Healing", "A staff that can heal wounds and cure ailments, making it invaluable to any group of adventurers.", 0, 0, 0, 12, 0, 0);
        Item Staff = new Item("Staff of the Elements", "A staff that can control all four elements (fire, ice, lightning, and earth), making it an extremely versatile weapon.", 0, 0, 0, 15, 0, 0);
        Item Staff = new Item("Staff of the Druid", " A staff that can control nature and summon animals, making it a valuable tool for any druid or nature-based caster.", 0, 0, 0, 18, 0, 0);
        Item Staff = new Item("Staff of Necromancy", "A staff that can raise the dead and control undead creatures, making it a powerful weapon for dark wizards.", 0, 0, 0, 21, 0, 0);
        Item Staff = new Item("Staff of Destruction", "A staff crafted with the power of elements forged in hellfire.", 0, 0, 0, 26, 0, 0);
        Item Staff = new Item("Staff of the Archmage", "A staff that enhances the wielder's magical abilities, making them more powerful and versatile in combat.", 0, 0, 0, 29, 0, 0);
        Item Staff = new Item("Staff of Time", "A staff that can manipulate time, allowing the wielder to slow down or speed up time, making it a valuable tool for both offense and defense.", 0, 0, 0, 35 , 0, 0);


        //Maces
        Item Mace = new Item("Club", "A simple, wooden mace that can deal heavy blunt force damage.", 0, 0, 5, 0, 0, 0);
        Item Mace = new Item("Spiked Mace", "A mace with long, sharp spikes protruding from the head, making it deadly against both armored and unarmored foes.", 0, 0, 6, 0, 0, 0);
        Item Mace = new Item("Flanged Mace", "A mace with sharp, spiked flanges that can cause serious damage to armored opponents.", 0, 0, 7, 0, 0, 0);
        Item Mace = new Item("Morningstar", "A mace with a spiked ball on the end of a chain, allowing for greater reach and more versatile attacks.", 0, 0, 11, 0, 0, 0);
        Item Mace = new Item("Blacksmiths hammer", "A mace normally used for crafting, but can be used as a weapon.", 0, 0, 12, 0, 0, 0);
        Item Mace = new Item("Cudgel", "A short, heavy mace with a flat, bludgeoning head.", 0, 0, 15, 0, 0, 0);
        Item Mace = new Item("Holy Mace", "A mace that deals extra damage to undead and demonic enemies, blessed by a religious order.", 0, 0, 17, 0, 0, 0);
        Item Mace = new Item("Bone Mace", "A mace made from the bones of fallen foes, often used by tribal warriors.", 0, 0, 21, 0, 0, 0);
        Item Mace = new Item("Inferno Mace", "A mace made crafted from bones of fallen enemies in the fiery dephts.", 0, 0, 25, 0, 0, 0);
        Item Mace = new Item("Moonlight Mace", "A mace made from a rare metal that shines with a soft, silver light. It is said to be imbued with the power of the moon, allowing it to deal extra damage to enemies who draw power from darkness. The Moonlight Mace also has the ability to heal the wielder when striking enemies that are weak to moon magic. The metal is incredibly light, making the mace surprisingly easy to wield despite its power. The Moonlight Mace is highly sought after by paladins and other holy warriors who seek to rid the world of evil.", 0, 0, 33, 0, 0, 0);


        //Daggers can be dual wielded together with a sword or mace as a rogue or warrior.
        //TODO add modifier so rogue gets extra damage from dual wielding daggers. 
        Item Dagger = new Item("Iron Dagger", "A simple, yet effective weapon made of iron that can pierce through light armor.", 0, 0, 3, 0, 0, 0);
        Item Dagger = new Item("Silver Dagger", "A dagger made of silver, which deals extra damage to enemies vulnerable to silver.", 0, 0, 4, 0, 0, 0);
        Item Dagger = new Item("Poisoned Dagger", "A dagger coated in deadly poison that deals damage over time to enemies.", 0, 0, 5, 0, 0, 0);
        Item Dagger = new Item("Obsidian Dagger", "A sharp and deadly dagger made of volcanic glass, which can easily pierce through armor.", 0, 0, 7, 0, 0, 0);
        Item Dagger = new Item("Stiletto", "A slender dagger with a long, narrow blade designed to penetrate the gaps in armor.", 0, 0, 8, 0, 0, 0);
        Item Dagger = new Item("Ceramic Dagger", "A light and durable dagger made of ceramic material, which can be easily concealed.", 0, 0, 9, 0, 0, 0);
        Item Dagger = new Item("Fire Dagger", "A magical dagger that deals fire damage to enemies, making it a powerful weapon against foes vulnerable to heat.", 0, 0, 11, 0, 0, 0);
        Item Dagger = new Item("Ice Dagger", "A magical dagger that deals ice damage to enemies, making it a powerful weapon against foes vulnerable to cold.", 0, 0, 12, 0, 0, 0);
        Item Dagger = new Item("Shadow Dagger", "A mysterious dagger that allows the wielder to teleport short distances, making it an excellent tool for both combat and infiltration.", 0, 0, 14, 0, 0, 0);
        Item Dagger = new Item("Soul Reaver", "A powerful dagger forged from the bones of demons, which can steal the soul of an enemy upon a killing blow. The Soul Reaver allows the wielder to use the stolen souls to gain temporary enhancements to their own abilities.", 0, 0, 15, 0, 0, 0);
        Item Dagger = new Item("Fang of the Vampire", "A unique dagger with a blade made from the fang of a vampire. The Fang of the Vampire not only deals extra damage to undead enemies, but also has the ability to drain the life force of enemies, healing the wielder in the process.", 0, 0, 17, 0, 0, 0);
        Item Dagger = new Item("Serpent's Kiss", "A legendary dagger imbued with the power of a venomous serpent. The Serpent's Kiss not only deals poison damage to enemies, but also has the ability to turn them against their allies for a short period of time. The wielder must be careful when using this powerful weapon, as it is said that the serpent's power can corrupt even the most noble of hearts.", 0, 0, 20, 0, 0, 0);


        //Two handers cant be used with shields
        Item Twohander = new Item("Greatsword", "A massive two-handed sword capable of dealing devastating damage to enemies.", 0, 0, 7, 0, 0, 0);
        Item Twohander = new Item("Claymore", "A Scottish two-handed sword with a broad blade that can cut through multiple enemies at once.", 0, 0, 10, 0, 0, 0);
        Item Twohander = new Item("Zweihander", "A German two-handed sword with a long blade designed for thrusting and cutting.", 0, 0, 12, 0, 0, 0);
        Item Twohander = new Item("Warhammer", "A heavy two-handed mace with a flat end that can deal crushing blows to enemies.", 0, 0, 15, 0, 0, 0);
        Item Twohander = new Item("Maul", "A large two-handed mace with a heavy, spiked head that can crush even heavily-armored foes.", 0, 0, 18, 0, 0, 0);
        Item Twohander = new Item("Halberd", "A two-handed polearm with a blade on the end, allowing for greater reach and the ability to trip enemies.", 0, 0, 21, 0, 0, 0);
        Item Twohander = new Item("Great Axe", "A massive two-handed axe with a broad blade that can cleave through multiple enemies at once.", 0, 0, 24, 0, 0, 0);
        Item Twohander = new Item("Flail", "A two-handed weapon with a spiked ball on a chain, allowing for greater reach and the ability to wrap around shields.", 0, 0, 27, 0, 0, 0);
        Item Twohander = new Item("Nodachi", "A Japanese two-handed sword with a long, curved blade designed for quick, sweeping strikes.", 0, 0, 30, 0, 0, 0);
        Item Twohander = new Item("Bastard Sword", "A versatile two-handed sword that can be wielded with one or two hands, allowing for greater flexibility in combat.", 0, 0, 33, 0, 0, 0);
        Item Twohander = new Item("Excalibur", "A legendary sword said to have been wielded by King Arthur himself. Excalibur is a powerful magical weapon capable of dealing massive damage to unholy forces.", 0, 0, 45, 0, 0, 0);
        Item Twohander = new Item("Thunder Maul", "A massive mace imbued with the power of lightning, allowing it to deal extra damage to enemies vulnerable to electricity.", 0, 0, 46, 0, 0, 0);
        Item Twohander = new Item("Dragon's Bane", "A spear made from dragon bones, which deals extra damage to dragons and can even pierce their tough scales.", 0, 0, 46, 0, 0, 0);



        //Armor
        //Maybe add stamina penalty for heavier armors while leather/scale might increase stam. 
        Item Armor = new Item("Cloth Tunic", "Basic armor made of cloth, providing minimal protection.", 0, 5, 0, 3, 0, 0);
        Item Armor = new Item("Bat leather Chest", "Armor made of hardened leather, offering a slight improvement in protection over cloth armor How did you even get this?.", 0, 5, 0, 4, 0, 0);
        Item Armor = new Item("Chainmail Armor", "Armor made of interlocking rings, providing good protection against slashing attacks but not as effective against piercing or crushing attacks.", 0, 8, 0, 12, 0, 0);
        Item Armor = new Item("Plate Armor", "Armor made of hardened metal plates, providing excellent protection against all types of attacks but also heavy and cumbersome to wear.", 0, 10, 0, 15, 0, 0);
        Item Armor = new Item("Scale Armor", "Armor made of overlapping metal scales, offering good protection while also being lighter and more flexible than plate armor.", 0, 15, 0, 13, 0, 0);
        Item Armor = new Item("Brigand Armor", "Armor made of metal plates sewn into a fabric coat, offering a good balance between protection and mobility.", 0, 17, 0, 15, 0, 0);
        Item Armor = new Item("Lamellar Armor", "Armor made of small metal or leather plates laced together, offering good protection and flexibility.", 0, 19, 0, 16, 0, 0);
        Item Armor = new Item("Splint Armor", "Armor made of metal strips riveted to a fabric or leather base, offering good protection against blunt attacks.", 0, 22, 0, 16, 0, 0);
        Item Armor = new Item("Gothic Armor", "armor made of articulated metal plates, offering excellent protection and flexibility, commonly used in the late Middle Ages.", 0, 25, 0, 20, 0, 0);
        Item Armor = new Item("Dragon Scale Armor", " legendary armor made of the scales of a dragon, offering almost impenetrable protection and often imbued with magical properties..", 0, 30, 0, 33, 0, 0);
        Item Armor = new Item("Demon Armor", "Demon armor is a jet black, fearsome set crafted from infernal hides, adorned with twisted horns and spikes, durable against physical and magical attacks, imbued with dark magic to resist and control demonic powers, but at a cost of succumbing to its demonic influence..", 0, 35, 0, 40, 0, 0);

        // Apply the items and bonuses to the player character
        sword.ApplyBonus(player);
        mace.ApplyBonus(player);
        dagger.ApplyBonus(player);
        shield.ApplyBonus(player);
        wand.ApplyBonus(player);
        staff.ApplyBonus(payer);
        Twohander.ApplyBonus(player);
        Armor.ApplyBonus(player);

        Console.WriteLine(player.GetName() + " has equipped the following items:");
        Console.WriteLine("- " + sword.name);
        Console.WriteLine("- " + mace.name);
        Console.WriteLine("- " + dagger.name);
        Console.WriteLine("- " + shield.name);
        Console.WriteLine("- " + wand.name);
        Console.WriteLine("- " + staff.name);
        Console.WriteLine("- " + Twohander.name);
        Console.WriteLine("- " + armor.name);


        Console.WriteLine();
        Console.WriteLine("Battle begins!");

        // Loop until either the player or the enemy dies
        while (player.GetCurrentHealth() > 0 && enemy.GetCurrentHealth() > 0)
        {
            // Player turn, write info in textbox e.g. "player" used Shadowstep
            Console.WriteLine();
            Console.WriteLine(player.GetName() + "'s turn:");
            player.PrintStats();
            Console.WriteLine("1. Ability 1");
            Console.WriteLine("2. Ability 2");
            Console.WriteLine("3. Ability 3");
            Console.WriteLine("4. Ability 4");

            Console.Write("Choose an action (1-4): ");
            int action = int.Parse(Console.ReadLine());

            switch (action)
            {
                case 1:
                    player.Ability1(enemy);
                    break;
                case 2:
                    player.Ability2(enemy);
                    break;
                case 3:
                    player.Ability3(enemy);
                    break;
                case 4:
                    player.Ability4(enemy);
                    break;
                default:
                    Console.WriteLine("Invalid action");
                    break;
            }

            // Enemy turn
            Console.WriteLine();
            Console.WriteLine(enemy.GetName() + "'s turn:");
            enemy.PrintStats();
            enemy.Ability1(player);

            // Regenerate stamina for both characters
            player.RegenerateStamina();
            enemy.RegenerateStamina();
        }

        Console.ReadLine();
    }
}
